#abstract method 

from abc import ABC, abstractmethod
class Polygon(ABC):
	def noofsides(self):
		pass
class Triangle(Polygon):
	def noofsides(self):
		print("I have 1 sides")
class Pentagon(Polygon):
	def noofsides(self):
		print("I have 3 sides")
class Hexagon(Polygon):
	def noofsides(self):
		print("I have 4 sides")
class Quadrilateral(Polygon):
	def noofsides(self):
		print("I have 2 sides")
R = Triangle()
R.noofsides()
K = Quadrilateral()
K.noofsides()
R = Pentagon()
R.noofsides()
K = Hexagon()
K.noofsides()

#diamond method

def Diamond(rows):
	n = 0
	for i in range(1, rows + 1):
		for j in range (1, (rows - i) + 1):
			print(end = " ")
		while n != (2 * i - 1):
			print("*", end = "")
			n = n + 1
		n = 0
		print()
	k = 1
	n = 1
	for i in range(1, rows):
		for j in range (1, k + 1):
			print(end = " ")
		k = k + 1
		while n <= (2 * (rows - i) - 1):
			print("*", end = "")
			n = n + 1
		n = 1
		print()
rows = 5
Diamond(rows)
