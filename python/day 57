import sys
Set1 = {"A", 1, "B", 2, "C", 3}
Set2 = {"durga", "sri", "durgasri", "kanmani", "kannamma", "dhiyasri"}
Set3 = {(1, "Lion"), ( 2, "Tiger"), (3, "Fox")}

print("Size of Set1: " + str(sys.getsizeof(Set1)) + "bytes")
print("Size of Set2: " + str(sys.getsizeof(Set2)) + "bytes")
print("Size of Set3: " + str(sys.getsizeof(Set3)) + "bytes")

test_set = set("ris")
for id,val in enumerate(test_set):
	print(id, val)
from timeit import default_timer as timer
import itertools
import random
def test_func(test_set):
	for id, val in enumerate(test_set):
		_ = val
if __name__ == '__main__':
	random.seed(21)
	for _ in range(5):
		test_set = set()
		for el in range(int(1e6)):
			el = random.random()
			test_set.add(el)
		start = timer()
		test_func(test_set)
		end = timer()
		print(str(end - start))
def MAX(sets):
	return (max(sets))
sets = set([8, 16, 24, 1, 25, 3, 10, 65, 55])
print(MAX(sets))
def Remove(initial_set):
	while initial_set:
		initial_set.pop()
		print(initial_set)
initial_set = set([12, 10, 13, 15, 8, 9])
Remove(initial_set)
def common_data(list1, list2):
	result = False
	for x in list1:
		for y in list2:
			if x == y:
				result = True
				return result				
	return result
a = [1, 2, 3, 4, 5]
b = [5, 6, 7, 8, 9]
print(common_data(a, b))
a = [1, 2, 3, 4, 5]
b = [6, 7, 8, 9]
print(common_data(a, b))
def IntersecOfSets(arr1, arr2, arr3):
	s1 = set(arr1)
	s2 = set(arr2)
	s3 = set(arr3)
	set1 = s1.intersection(s2)
	result_set = set1.intersection(s3)
	final_list = list(result_set)
	print(final_list)
if __name__ == '__main__' :
	arr1 = [1, 5, 10, 20, 40, 80, 100]
	arr2 = [6, 7, 20, 80, 100]
	arr3 = [3, 4, 15, 20, 30, 70, 80, 120]
	IntersecOfSets(arr1, arr2, arr3)
def Diff(li1, li2):
	return list(set(li1) - set(li2)) + list(set(li2) - set(li1))
li1 = [10, 15, 20, 25, 30, 35, 40]
li2 = [25, 40, 35]
print(Diff(li1, li2))

def lostElement(A,B):
	A = set(A)
	B = set(B)
	if len(A) > len(B):
		print (list(A-B))
	else:
		print (list(B-A))
if __name__ == "__main__":
	A = [1, 4, 5, 7, 9]
	B = [4, 5, 7, 9]
	lostElement(A,B)
