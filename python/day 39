list = ["durga,sri,dhiya"]
print("\nList containing multiple values: ")
print(List)

List2 = [['durga', 'For'], ['dhiyasri']]
print("\nMulti-Dimensional List: ")
print(List2)

print("Accessing element from the list")
print(List[0])
print(List[2])


print("Accessing element using negative indexing")
	
print(List[-1])

print(List[-3])


Dict = {'Name': 'durga', 1: [1, 2, 3, 4]}
print("Creating Dictionary: ")
print(Dict)

print("Accessing a element using key:")
print(Dict['Name'])

print("Accessing a element using get:")
print(Dict.get(1))

myDict = {x: x**2 for x in [1,2,3,4,5]}
print(myDict)


Tuple = ('durgasri', 'For')
print("\nTuple with the use of String: ")
print(Tuple)

list1 = [1, 2, 4, 5, 6]
print("\nTuple using List: ")
Tuple = tuple(list1)

print("First element of tuple")
print(Tuple[0])

print("\nLast element of tuple")
print(Tuple[-1])
	
print("\nThird last element of tuple")
print(Tuple[-3])


Set = set([1, 2, 'durga', 4, 'For', 6, 'durga'])
print("\nSet with the use of Mixed Values")
print(Set)

print("\nElements of set: ")
for i in Set:
	print(i, end =" ")
print()

print("Geeks" in Set)


normal_set = set(["s", "r","i"])

print("Normal Set")
print(normal_set)

frozen_set = frozenset(["s", "r", "i"])

print("\nFrozen Set")
print(frozen_set)


String = "Welcome to GeeksForGeeks"
print("Creating String: ")
print(String)
	
print("\nFirst character of String is: ")
print(String[0])

print("\nLast character of String is: ")
print(String[-1])


a = bytearray((12, 8, 25, 2))
print("Creating Bytearray:")
print(a)

print("\nAccessing Elements:", a[1])

a[1] = 3
print("\nAfter Modifying:")
print(a)

a.append(30)
print("\nAfter Adding Elements:")
print(a)


from collections import Counter
	
print(Counter(['B','B','A','B','C','A','B','B','A','C']))
	
# with dictionary
count = Counter({'A':3, 'B':5, 'C':2})
print(count)

count.update(['A', 1])
print(count)


from collections import OrderedDict

print("Before deleting:\n")
od = OrderedDict()
od['a'] = 1
od['b'] = 2
od['c'] = 3
od['d'] = 4

for key, value in od.items():
	print(key, value)

print("\nAfter deleting:\n")
od.pop('c')
for key, value in od.items():
	print(key, value)

print("\nAfter re-inserting:\n")
od['c'] = 3
for key, value in od.items():
	print(key, value)


from collections import defaultdict
	
d = defaultdict(int)
	
L = [1, 2, 3, 4, 2, 4, 1, 2]

for i in L:

	d[i] += 1
		
print(d)


from collections import ChainMap
	
	
d1 = {'a': 1, 'b': 2}
d2 = {'c': 3, 'd': 4}
d3 = {'e': 5, 'f': 6}

c = ChainMap(d1, d2, d3)
print(c)

print(c['a'])
print(c['g'])


from collections import namedtuple
	
Student = namedtuple('Student',['name','age','DOB'])
	

S = Student('srithar','22','20407969')

print ("The Student age using index is : ",end ="")
print (S[1])

print ("The Student name using keyname is : ",end ="")
print (S.name)


import collections

de = collections.deque([1,2,3])

de.append(4)

print("The deque after appending at right is : ")
print(de)

de.appendleft(6)

print("The deque after appending at left is : ")
print(de)

de.pop()

print("The deque after deleting from right is : ")
print(de)

de.popleft()

print("The deque after deleting from left is : ")
print(de)


from collections import UserDict

class MyDict(UserDict):

	def __del__(self):
		raise RuntimeError("Deletion not allowed")

	def pop(self, s = None):
		raise RuntimeError("Deletion not allowed")

	def popitem(self, s = None):
		raise RuntimeError("Deletion not allowed")

d = MyDict({'a':1,
	'b': 2,
	'c': 3})

print("Original Dictionary")
print(d)

d.pop(1)




from collections import UserList


class MyList(UserList):

	def remove(self, s = None):
		raise RuntimeError("Deletion not allowed")

	def pop(self, s = None):
		raise RuntimeError("Deletion not allowed")

L = MyList([1, 2, 3, 4])

print("Original List")
print(L)

L.append(5)
print("After Insertion")
print(L)

L.remove()


from collections import UserString

class Mystring(UserString):

	def append(self, s):
		self.data += s
	
	def remove(self, s):



from collections import deque:

stack = deque()

stack.append('d')
stack.append('h')
stack.append('i')
stack.append('y')
stack.append('a')
stack.append('s')
stack.append('r')
stack.append('i')

print('Initial stack:')
print(stack)

print('\nElements popped from stack:')
print(stack.pop())
print(stack.pop())
print(stack.pop())

print('\nStack after elements are popped:')
print(stack)



from queue import LifoQueue

stack = LifoQueue(maxsize = 3)

print(stack.qsize())

stack.put('d')
stack.put('h')
stack.put('i')
stack.put('y')
stack.put('a')
stack.put('s')
stack.put('r')
stack.put('i')

print("Full: ", stack.full())
print("Size: ", stack.qsize())

print('\nElements popped from the stack')
print(stack.get())
print(stack.get())
print(stack.get())

print("\nEmpty: ", stack.empty())


queue = []

queue.append('d')
queue.append('h')
queue.append('i')
queue.append('y')
queue.append('a')
queue.append('s')
queue.append('r')
queue.append('i')

print("Initial queue")
print(queue)

print("\nElements dequeued from queue")
print(queue.pop(0))
print(queue.pop(0))
print(queue.pop(0))

print("\nQueue after removing elements")
print(queue)



from collections import deque

q = deque()

q.append('d')
q.append('h')
q.append('i')
q.append('y')
q.append('a')
q.append('s')
q.append('r')
q.append('i')

print("Initial queue")
print(q)

print("\nElements dequeued from the queue")
print(q.popleft())
print(q.popleft())
print(q.popleft())

print("\nQueue after removing elements")
print(q)



from queue import Queue

q = Queue(maxsize = 3)


print(q.qsize())

q.put('d')
q.put('h')
q.put('i')
q.put('y')
q.put('a')
q.put('s')
q.put('r')
q.put('i')


print("\nFull: ", q.full())

print("\nElements dequeued from the queue")
print(q.get())
print(q.get())
print(q.get())


print("\nEmpty: ", q.empty())

q.put(1)
print("\nEmpty: ", q.empty())
print("Full: ", q.full())

class PriorityQueue(object):
	def __init__(self):
		self.queue = []

	def __str__(self):
		return ' '.join([str(i) for i in self.queue])

	def isEmpty(self):
		return len(self.queue) == 0

	def insert(self, data):
		self.queue.append(data)

	def delete(self):
		try:
			max = 0
			for i in range(len(self.queue)):
				if self.queue[i] > self.queue[max]:
					max = i
			item = self.queue[max]
			del self.queue[max]
			return item
		except IndexError:
			print()
			exit()

if __name__ == '__main__':
	myQueue = PriorityQueue()
	myQueue.insert(12)
	myQueue.insert(1)
	myQueue.insert(14)
	myQueue.insert(7)
	print(myQueue)			
	while not myQueue.isEmpty():
		print(myQueue.delete())
