class Dog:
	attr1 = "sri"
	def __init__(self, name):
		self.name = name
Rodger = Dog("durgasri")
Tommy = Dog("sri kutty")
print("Rodger is a {}".format(Rodger.__class__.attr1))
print("Tommy is also a {}".format(Tommy.__class__.attr1))
print("My name is {}".format(Rodger.name))
print("My name is {}".format(Tommy.name))
class Dog:
	attr1 = "durgasri"
	def __init__(self, name):
		self.name = name
	def speak(self):
		print("My name is {}".format(self.name))
Rodger = Dog("durgasri")
Tommy = Dog("sri")
Rodger.speak()
Tommy.speak()
class Person(object):
	def __init__(self, name, idnumber):
		self.name = name
		self.idnumber = idnumber
	def display(self):
		print(self.name)
		print(self.idnumber)
	def details(self):
		print("My name is {}".format(self.name))
		print("IdNumber: {}".format(self.idnumber))
class Employee(Person):
	def __init__(self, name, idnumber, salary, post):
		self.salary = salary
		self.post = post
		Person.__init__(self, name, idnumber)
	def details(self):
		print("My name is {}".format(self.name))
		print("IdNumber: {}".format(self.idnumber))
		print("Post: {}".format(self.post))
a = Employee('sri', 2000, 200000, "durgasri")
a.display()
a.details()
class Base:
	def __init__(self):
		self.a = "durga"
		self.__c = "durgasri"
class Derived(Base):
	def __init__(self):
		Base.__init__(self)
		print("Calling private member of base class: ")
		print(self.__c)
obj1 = Base()
print(obj1.a)
